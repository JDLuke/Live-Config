plugins {
    id 'java'
    id 'war'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.8'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.jdluke'
version = '0.0.1-SNAPSHOT'

//foojay {
//    repositories {
//        foojay {
//            url = "https://api.adoptium.net/v3/binary/latest/11/ga/mac/x64/jdk/hotspot/normal/eclipse"
//        }
//    }
//}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)

    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}
ext {
    set('springCloudVersion', "2023.0.5")
}


jacoco {
    toolVersion = "0.8.13" // Specify the latest JaCoCo version that supports Java 22
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.5'
        // Use the appropriate Spring Cloud version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


checkstyle {
    toolVersion = '10.6.0' // Specify the Checkstyle version you want to use
    configFile = file('config/checkstyle/checkstyle.xml') // Path to your Checkstyle configuration file
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.file("./target/reports/checkstyle/checkstyle.html"))
    }
}

jacoco {
    toolVersion = "0.8.8" // Specify the Jacoco version you want to use
}

test {
    finalizedBy jacocoTestReport // Ensure the test report is generated after tests run
}

jacocoTestReport {
    dependsOn test // Ensure tests run before generating the report

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/html"))
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/xml"))
    }
}

check.dependsOn checkstyleMain, checkstyleTest
